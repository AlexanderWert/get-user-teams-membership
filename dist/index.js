module.exports=(()=>{var __webpack_modules__={351:(e,r,t)=>{const o=t(396);const n=t(716);run();async function run(){try{const e=n.getOctokit(o.getInput("GITHUB_TOKEN",{required:true}),{});const r=o.getInput("organization")||context.repo.owner;const t=o.getInput("username");const a=o.getInput("team");console.log(`Getting teams for ${t} in org ${r}. Will check if belongs to ${a}`);const _=`query($cursor: String, $org: String!, $userLogins: [String!])  {\n            organization(login: $org) {      \n              teams (first:1, userLogins: $userLogins, after: $cursor) { \n                  nodes {\n                    name\n                }\n                pageInfo {\n                  hasNextPage\n                  endCursor\n                }        \n              }\n            }\n        }`;let s;let u=[];let c=null;do{s=await e.graphql(_,{cursor:c,org:r,userLogins:[t]});u=u.concat(s.organization.teams.nodes.map(e=>{return e.name}));c=s.organization.teams.pageInfo.endCursor}while(s.organization.teams.pageInfo.hasNextPage);let i=u.some(e=>{return a.toLowerCase()===e.toLowerCase()});o.setOutput("teams",u);o.setOutput("isTeamMember",i)}catch(e){o.setFailed(e.message)}}},396:module=>{module.exports=eval("require")("@actions/core")},716:module=>{module.exports=eval("require")("@actions/github")}};var __webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e]){return __webpack_module_cache__[e].exports}var r=__webpack_module_cache__[e]={exports:{}};var t=true;try{__webpack_modules__[e](r,r.exports,__webpack_require__);t=false}finally{if(t)delete __webpack_module_cache__[e]}return r.exports}__webpack_require__.ab=__dirname+"/";return __webpack_require__(351)})();